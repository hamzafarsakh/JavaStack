package com.example.demo.controllers;



import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.demo.models.Categorie;
import com.example.demo.models.Product;
import com.example.demo.services.MainService;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;


@Controller
public class MainController {
	 @Autowired
     private MainService mainService;

	
	@GetMapping("/show")
	public String showAll(HttpSession session,Model model) {
		List<Product> allProducts = mainService.findAllProducts();
		List<Categorie> allCategories = mainService.findAllCategories();
		
		model.addAttribute("allProducts", allProducts);
		model.addAttribute("allCategories", allCategories);
		return "show.jsp";
	}
	
	@GetMapping("/products/new")
	 public String newProduct1(HttpSession session, Model model,@ModelAttribute("product") Product product) {
		 if( session.getAttribute("user_id") == null) {
			return "redirect:/logout";
		 }
		 return "creat_new_product.jsp";
	 }
	 
	 
	 @PostMapping("/products/new")
	 public String newProduct2(@Valid @ModelAttribute("product") Product product, BindingResult result, Model model) {
	        if (result.hasErrors()) {
	            model.addAttribute("product", product);
	            return "creat_new_product.jsp";
	        } else {
	            mainService.addProduct(product);
	            return "redirect:/products/new";
	        }
	    }
	 
		@GetMapping("/categories/new")
		 public String newCategorie1(HttpSession session, Model model,@ModelAttribute("categorie") Categorie categorie) {
			 if( session.getAttribute("user_id") == null) {
				return "redirect:/logout";
			 }
			 return "creat_new_categorie.jsp";
		 }
		 
		 
		 @PostMapping("/categories/new")
		 public String newCategorie2(@Valid @ModelAttribute("categorie") Categorie categorie, BindingResult result, Model model) {
		        if (result.hasErrors()) {
		            model.addAttribute("categorie", categorie);
		            return "creat_new_categorie.jsp";
		        } else {
		            mainService.addCategorie(categorie);
		            return "redirect:/categories/new";
		        }
		    }
		 

		 
			@GetMapping("/products/{productId}")
			 public String showProduct12(HttpSession session, Model model,@PathVariable("productId") Long productId) {
				 if( session.getAttribute("user_id") == null) {
					return "redirect:/logout";
				 }
				 Product product1 = mainService.findProduct(productId);
				 List<Categorie> catForProduct1 = product1.getCategories();
				 List<Categorie> catNotInProduct1 = mainService.findByProductsNotContains(product1);
				 
				 model.addAttribute("catForProduct1", catForProduct1);
				 model.addAttribute("catNotInProduct1", catNotInProduct1);
				 model.addAttribute("product1", product1);
				 return "add_to_product.jsp";
			 }
			 
			 
			 @PostMapping("/products/{productId}")
			 public String showProduct235(@PathVariable("productId") Long productId, Model model,@RequestParam(value = "categorieId") Long categorieId) {
			        	Categorie categorie1 = mainService.findCategorie(categorieId);
			        	Product Product1 = mainService.findProduct(productId);
			        	List<Categorie> listCategorie = Product1.getCategories();
			        	listCategorie.add(categorie1);
			        	Product1.setCategories(listCategorie);
			        	mainService.addProduct(Product1);
			            return "redirect:/products/" + productId;
			    }
			 
				@GetMapping("/categories/{categorieId}")
				 public String showCategorie12(HttpSession session, Model model,@PathVariable("categorieId") Long categorietId) {
					 if( session.getAttribute("user_id") == null) {
						return "redirect:/logout";
					 }
					 Categorie categorie1 = mainService.findCategorie(categorietId);
					 List<Product> proForCategorie1 = categorie1.getProducts();
					 List<Product> proNotInCategorie1 = mainService.findByCategoriesNotContains(categorie1);
					 
					 model.addAttribute("proForCategorie1", proForCategorie1);
					 model.addAttribute("proNotInCategorie1", proNotInCategorie1);
					 model.addAttribute("categorie1", categorie1);
					 return "add_to_categorie.jsp";
				 }
				 
				 
				 @PostMapping("/categories/{categorieId}")
				 public String showCategorie235(@PathVariable("categorieId") Long categorieId, Model model,@RequestParam(value = "productId") Long productId) {
				        	Categorie categorie1 = mainService.findCategorie(categorieId);
				        	Product Product1 = mainService.findProduct(productId);
				        	List<Categorie> listCategorie = Product1.getCategories();
				        	listCategorie.add(categorie1);
				        	Product1.setCategories(listCategorie);
				        	mainService.addProduct(Product1);
				            return "redirect:/categories/" + productId;
				    }
	
}
