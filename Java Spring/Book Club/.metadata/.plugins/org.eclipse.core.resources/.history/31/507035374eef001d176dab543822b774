package com.example.demo.controllers;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;

import com.example.demo.models.Book;
import com.example.demo.models.LoginUser;
import com.example.demo.models.User;
import com.example.demo.services.MainService;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;



@Controller
public class MainController {
	@Autowired
    private MainService userServ;
	 @GetMapping("/")
	    public String index(Model model) {
	        // Bind empty User and LoginUser objects to the JSP
	        // to capture the form input
	        model.addAttribute("newUser", new User());
	        model.addAttribute("newLogin", new LoginUser());
	        return "index.jsp";
	    }
	 
	 @PostMapping("/register")
	    public String register(@Valid @ModelAttribute("newUser") User newUser, 
	            BindingResult result, Model model, HttpSession session) {
	        userServ.register(newUser, result);
	        if(result.hasErrors()) {
	            model.addAttribute("newLogin", new LoginUser());
	            return "index.jsp";
	        }
	        session.setAttribute("user_id", newUser.getId());
	        return "redirect:/books";
	    }

	 @PostMapping("/login")
	    public String login(@Valid @ModelAttribute("newLogin") LoginUser newLogin, 
	            BindingResult result, Model model, HttpSession session) {
	        User user = userServ.login(newLogin, result);
	        if(result.hasErrors()) {
	            model.addAttribute("newUser", new User());
	            return "index.jsp";
	        }
	        session.setAttribute("user_id", user.getId());
	        return "redirect:/books";
	    }


	 
	 @GetMapping("/logout")
	 public String logout(HttpSession session) {
		 session.invalidate();
		 return"redirect:/";
	 }
	 
	 
	 @Autowired
     private MainService mService;
	 

	 
	 @GetMapping("/books")
	 public String books(HttpSession session, Model model) {
 		 if( session.getAttribute("user_id") == null) {
 			return "redirect:/logout";
 		 }
		 Long user_id = (Long) session.getAttribute("user_id");
		 User thisUser = userServ.findUserById(user_id);
		 model.addAttribute("thisUser", thisUser);
//		 List<Book> books1 = mService.allBooks();
		 List<Object[]> books1 = mService.findallbookQQ();
		 System.out.println(books1);
		 model.addAttribute("books1", books1);
 		 return "books.jsp";
	 }
	 
	 @GetMapping("/books/new")
	 public String newBook(HttpSession session, Model model,@ModelAttribute("book") Book book) {
 		 if( session.getAttribute("user_id") == null) {
 			return "redirect:/logout";
 		 }
		 return "newbooks.jsp";
	 }
	 
	 
	 @PostMapping("/books/new")
	 public String addBook(@Valid @ModelAttribute("book") Book book, BindingResult result, Model model) {
	        if (result.hasErrors()) {
	            model.addAttribute("book", book);
	            return "newbooks.jsp";
	        } else {
	            mService.addBook(book);
	            return "redirect:/books/new";
	        }
	    }
	 
	 @GetMapping("/books/{bookId}")
	 public String newBook(HttpSession session, Model model,@PathVariable("bookId") Long bookId) {
 		 if( session.getAttribute("user_id") == null) {
 			return "redirect:/logout";
 		 }
 		 Book book1 = mService.findBook(bookId);
 		 model.addAttribute("book1", book1);
		 return "showOneBook.jsp";
	 }
	 
	
	 @GetMapping("/books/{id}/edit")
	 public String editBook(HttpSession session, Model model,@ModelAttribute("book") Book book,@PathVariable("id") Long id) {
 		 if( session.getAttribute("user_id") == null) {
 			return "redirect:/logout";
 		 }
 		 Book book1 = mService.findBook(id);
 		model.addAttribute("book1", book1);
		 return "editBook.jsp";
	 }
	 
	 
	 @PutMapping("/books/{id}/edit")
	 public String updateBook(@Valid @ModelAttribute("book") Book book, BindingResult result, Model model,@PathVariable("id") Long id) {
	        if (result.hasErrors()) {
	    		 Book book1 = mService.findBook(id);

	            model.addAttribute("book1", book1);
	            return "editBook.jsp";
	        } else {
	            mService.addBook(book);
	            return "redirect:/books/"+id+"/edit";
	        }
	    }
	 
	 @GetMapping("/deleteBook/{bookId}")
	 public String delete(@PathVariable("bookId") Long bookId) {
		 Book book1 = mService.findBook(bookId);
		 mService.deleteBook(book1);
		 return "redirect:/books";
	 }

	 
}
